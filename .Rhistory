Age_Group == 4 ~ "45 to 54",
Age_Group == 5 ~ "55 to 64",
Age_Group == 6 ~ "65 or older",
TRUE ~ NA_character_  # Addressing any missing or inconsistent data
) |> factor(levels = c("18 to 24", "25 to 34", "35 to 44", "45 to 54", "55 to 64", "65 or older")),
# Categorizing BMI
BMI_Category = case_when(
BMI_Category == 1 ~ "Underweight",
BMI_Category == 2 ~ "Normal Weight",
BMI_Category == 3 ~ "Overweight",
BMI_Category == 4 ~ "Obese",
TRUE ~ NA_character_  # Accounting for missing or unclear responses
) |> factor(levels = c("Underweight", "Normal Weight", "Overweight", "Obese")),
# Evaluating smoking status
Smoking_Status = case_when(
Smoking_Status == 1 ~ "Everyday smoker",
Smoking_Status == 2 ~ "Someday smoker",
Smoking_Status == 3 ~ "Former smoker",
Smoking_Status == 4 ~ "Never smoked",
Smoking_Status == 9 ~ NA_character_,  # Excluding non-responsive or uncertain data
TRUE ~ NA_character_
) |> factor(levels = c("Everyday smoker", "Someday smoker", "Former smoker", "Never smoked")),
# Assessing general health to understand overall well-being
General_Health = case_when(
General_Health == 1 ~ "Good or Better",
General_Health == 2 ~ "Fair or Poor",
General_Health == 9 ~ NA_character_,  # Filtering out vague or declined answers
TRUE ~ NA_character_
) |> factor(levels = c("Good or Better", "Fair or Poor"))
)
# Create a mapping from FIPS codes to state names and abbreviations
state_info <- data.frame(
FIPS = c(1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 66, 72, 78),
State_Name = c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "District of Columbia", "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming", "Guam", "Puerto Rico", "Virgin Islands"),
State_Abbrev = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY", "GU", "PR", "VI"),
stringsAsFactors = FALSE
)
# Merge 'brf_data' with 'state_info' to include state names and abbreviations
brf_data <- merge(brf_data, state_info, by.x = 'State', by.y = 'FIPS', all.x = TRUE)
# Ensure 'State_Name' and 'State_Abbrev' are at the beginning of 'brf_data'
brf_data <- brf_data[c("State_Name", "State_Abbrev", setdiff(names(brf_data), c("State_Name", "State_Abbrev", "State")))]
# Review the structure of the updated dataset
str(brf_data)
# Visualizing the NA percentages across columns
brf_data |>
summarise(across(everything(), ~ mean(is.na(.)) * 100)) |>
pivot_longer(everything(), names_to = "Column", values_to = "PercentageNA") |>
ggplot(aes(x = reorder(Column, PercentageNA), y = PercentageNA, fill = PercentageNA)) +
geom_col() +
coord_flip() +
scale_fill_gradient(low = "lightgreen", high = "red") +
labs(x = "", y = "Percentage of NA", title = "Percentage of missing values by column") +
theme_minimal() +
theme(legend.title = element_blank(),
axis.title.x = element_text(vjust = -0.5)
) +
scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
geom_text(aes(label = sprintf("%.1f%%", PercentageNA)), hjust = -0.1, color = "black", size = 3, check_overlap = TRUE)
summary(brf_data$Days_PhysHealth_Bad)
summary(brf_data$Days_MentHealth_Bad)
# Plotting distribution histograms
brf_data |>
pivot_longer(cols = c(Days_PhysHealth_Bad, Days_MentHealth_Bad), names_to = "Health_Type", values_to = "Days") |>
na.omit() |>
ggplot(aes(x = Days, fill = Health_Type)) +
geom_histogram(binwidth = 1, color = "black") +
facet_wrap(~Health_Type, scales = "free_y", labeller = as_labeller(c(Days_PhysHealth_Bad = "Physical Health", Days_MentHealth_Bad = "Mental Health"))) +
labs(title = "Distribution of days with poor health", x = "Number of days", y = "Frequency") +
scale_fill_brewer(palette = "Pastel2") +
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(vjust = -0.5)
)
# Boxplot comparing the number of poor physical and mental health days by asthma status
brf_data |>
filter(!is.na(Asthma_Status), !is.na(Days_PhysHealth_Bad), !is.na(Days_MentHealth_Bad)) |>
pivot_longer(cols = c(Days_PhysHealth_Bad, Days_MentHealth_Bad), names_to = "Type", values_to = "Days") |>
mutate(Type = recode(Type, Days_PhysHealth_Bad = "Physical", Days_MentHealth_Bad = "Mental")) |>
ggplot(aes(x = Asthma_Status, y = Days, fill = Asthma_Status)) +
geom_boxplot() +
facet_wrap(~Type, scales = "free_y", nrow = 2) +
labs(title = "Comparison of poor health days by asthma status",
x = "Asthma status",
y = "Number of days") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
theme(legend.title = element_blank(),
strip.background = element_blank(),
strip.text.x = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(vjust = -0.5)
)
# Create a pie chart with the distribution of asthma status
brf_data |>
filter(!is.na(Asthma_Status)) |>
count(Asthma_Status) |>
mutate(Percentage = n / sum(n) * 100) |>
ggplot(aes(x = "", y = Percentage, fill = Asthma_Status)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Distribution of asthma status in the dataset (%)",
x = "",
y = "") +
scale_fill_brewer(palette = "Pastel1") +
theme_void() +
theme(legend.title = element_blank(),
plot.title = element_text(hjust = 0.5)) +
geom_text(aes(label = paste0(round(Percentage, 1), "%")), position = position_stack(vjust = 0.5))
# Plotting distribution of asthma status within age groups
brf_data |>
filter(!is.na(Asthma_Status), !is.na(Age_Group)) |>
group_by(Age_Group) |>
count(Asthma_Status) |>
mutate(Percentage = n / sum(n)) |>
ungroup() |>
ggplot(aes(x = Age_Group, y = Percentage, fill = Asthma_Status)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(aes(label = scales::percent(Percentage, accuracy = 0.1)),
position = position_fill(vjust = 0.5), size = 3, color = "black") +
scale_y_continuous(labels = scales::percent_format()) +
labs(title = "Distribution of asthma status within age groups",
x = "Age group",
y = "Percentage",
fill = "Asthma status") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(vjust = -0.5),
legend.position = "right")
# Investigating the relationship between smoking status and asthma
brf_data |>
filter(!is.na(Smoking_Status), !is.na(Asthma_Status)) |>
count(Smoking_Status, Asthma_Status) |>
group_by(Smoking_Status) |>
mutate(Percentage = n / sum(n)) |>
ungroup() |>
mutate(Smoking_Status = factor(Smoking_Status, levels = rev(levels(Smoking_Status)))) |>
ggplot(aes(x = Smoking_Status, y = Percentage, fill = Asthma_Status)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.25),
limits = c(0, 1)
) +
geom_text(
aes(label = ifelse(Percentage > 0.01, scales::percent(Percentage, accuracy = 0.1), "")),
position = position_dodge(width = 0.7),
vjust = -0.25,
size = 3.5
) +
scale_fill_brewer(palette = "Pastel1") +
labs(title = "Asthma status distribution by smoking status",
x = "Smoking Status", y = "Percentage of asthma status",
fill = "Asthma status") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "bottom",
axis.title.x = element_text(vjust = -0.5)
)
# Create the visualization
brf_data |>
filter(!is.na(Asthma_Status), !is.na(Sex), !is.na(Race_Ethnicity)) |>
group_by(Sex, Race_Ethnicity, Asthma_Status) |>
summarise(count = n(), .groups = "drop") |>
group_by(Sex, Race_Ethnicity) |>
mutate(Percentage = count / sum(count) * 100) |>
ggplot(aes(x = Asthma_Status, y = Percentage, fill = Asthma_Status)) +
geom_bar(stat = "identity") +
facet_grid(Sex ~ Race_Ethnicity) +
labs(title = "Distribution of asthma status by gender and race/ethnicity (%)",
x = "",
y = "Percentage",
fill = "Asthma Status") +
scale_fill_brewer(palette = "Pastel1") +
scale_y_continuous(limits = c(0, 100)) +
theme_minimal() +
theme(axis.text.x = element_blank()) +
geom_text(aes(label = paste0(round(Percentage, 1), "%")),
position = position_stack(vjust = 0.5),
size = 2.8,
color = "black")
# Create the visualization
brf_data |>
filter(!is.na(Asthma_Status), !is.na(Marital_Status)) |>
group_by(Marital_Status, Asthma_Status) |>
summarise(count = n(), .groups = "drop") |>
group_by(Marital_Status) |>
mutate(Percentage = count / sum(count) * 100) |>
ggplot(aes(x = Marital_Status, y = Percentage, fill = Asthma_Status)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Distribution of asthma status by marital status (%)",
x = "Marital status",
y = "Percentage",
fill = "Asthma status") +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal() +
geom_text(aes(label = paste0(round(Percentage, 1), "%")),
position = position_dodge(width = 0.9),
vjust = -0.5,
size = 3,
color = "black") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5))
# Investigating the relationship between weight category and asthma
brf_data |>
filter(!is.na(BMI_Category), !is.na(Asthma_Status)) |>
mutate(BMI_Category = factor(BMI_Category)) |>
count(BMI_Category, Asthma_Status) |>
group_by(BMI_Category) |>
mutate(Percentage = n / sum(n)) |>
ungroup() |>
ggplot(aes(x = BMI_Category, y = Percentage, fill = Asthma_Status)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.25),
limits = c(0, 1)
) +
geom_text(
aes(label = ifelse(Percentage > 0.01, scales::percent(Percentage, accuracy = 0.1), "")),
position = position_dodge(width = 0.7),
vjust = -0.25,
size = 3
) +
scale_fill_brewer(palette = "Pastel1") +
labs(title = "Asthma status distribution by weight category",
x = "Weight сategory", y = "Percentage of asthma status",
fill = "Asthma status") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right",
axis.title.x = element_text(vjust = -0.7)
)
# Creating a visualization for health perception by exercise and asthma status
brf_data |>
filter(!is.na(Exercise), !is.na(General_Health)) |>
count(Exercise, General_Health) |>
group_by(Exercise) |>
mutate(Percentage = n / sum(n)) |>
ungroup() |>
ggplot(aes(x = Exercise, y = Percentage, fill = General_Health)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7)) +
scale_y_continuous(
labels = scales::percent_format(accuracy = 1),
breaks = seq(0, 1, by = 0.25),
limits = c(0, 1)
) +
geom_text(
aes(label = ifelse(Percentage > 0.01, scales::percent(Percentage, accuracy = 0.1), "")),
position = position_dodge(width = 0.7),
vjust = -0.25,
size = 3
) +
scale_fill_brewer(palette = "Pastel2") +
labs(title = "Health perception by exercise and asthma status",
x = "Exercise", y = "Percentage of health status",
fill = "Health status") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right",
axis.title.x = element_text(vjust = -0.7)
)
# Creating a visualization for employment status by asthma status
brf_data |>
filter(!is.na(Employment_Status), !is.na(Asthma_Status)) |>
count(Employment_Status, Asthma_Status) |>
group_by(Asthma_Status) |>
mutate(Percentage = n / sum(n)) |>
ungroup() |>
ggplot(aes(x = Asthma_Status, y = Percentage, fill = Employment_Status)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
scale_fill_brewer(palette = "Set2") +
labs(title = "Employment status by asthma status",
x = "Asthma status",
y = "Percentage of employment status",
fill = "Employment status") +
geom_text(aes(label = ifelse(Percentage > 0.05, paste0(round(Percentage*100, 1), "%"), "")),
position = position_stack(vjust = 0.5),
color = "black",
size = 3) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(vjust = -0.7),
legend.position = "right")
# Drawing a map illustrating the distribution of all asthma respondents by state
# Filtering the states map to include only relevant states and joining asthma data, then plotting the map with asthma respondent counts
states_map |>
filter(STUSPS %in% intersect(unique(brf_data$State_Abbrev), STUSPS)) |>
filter(STUSPS %in% c("AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
"ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
"NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA",
"RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA",
"WV", "WI", "WY")) |>
left_join(
brf_data |>
filter(!is.na(Asthma_Status)) |>
group_by(State_Abbrev) |>
summarise(Count = n(), .groups = "drop"),
by = c("STUSPS" = "State_Abbrev")
) |>
mutate(
centroids_df = st_centroid(geometry) |>
st_coordinates() |>
as.data.frame() |>
setNames(c("x", "y")),
STUSPS = as.character(STUSPS)
) |>
select(-geometry)  |>
ggplot() +
geom_sf(aes(fill = Count)) +
geom_text(aes(x = centroids_df$x, y = centroids_df$y, label = STUSPS), size = 2) +
scale_fill_gradient(name = "Number of respondents", low = "lightyellow", high = "darkorange") +
labs(title = "Distribution of asthma respondents by state") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_blank(),
axis.title = element_blank())
# Drawing a map illustrating the percentage distribution of current asthma cases by state
states_map |>
filter(STUSPS %in% intersect(unique(brf_data$State_Abbrev), STUSPS)) |>
filter(STUSPS %in% c("AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
"ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
"MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH",
"NJ", "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA",
"RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA",
"WV", "WI", "WY")) |>
left_join(
brf_data |>
filter(!is.na(Asthma_Status)) |>
group_by(State_Abbrev) |>
summarise(
Total_Asthma = n(),
Current_Asthma = sum(Asthma_Status == "Current", na.rm = TRUE),
Percentage = (Current_Asthma / Total_Asthma) * 100,
.groups = "drop"
),
by = c("STUSPS" = "State_Abbrev")
) |>
mutate(
centroids_df = st_centroid(geometry) |>
st_coordinates() |>
as.data.frame() |>
setNames(c("x", "y")),
STUSPS = as.character(STUSPS)
) |>
select(-geometry) |>
ggplot() +
geom_sf(aes(fill = Percentage)) +
geom_text(aes(x = centroids_df$x, y = centroids_df$y, label = STUSPS), size = 2) +
scale_fill_gradient(name = "Percentage", low = "lightgreen", high = "darkred") +
labs(title = "Percentage distribution of current asthma cases by state") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text = element_blank(),
axis.title = element_blank())
# Bar plot showing the top and bottom 5 states by current and former asthma prevalence.
brf_data |>
filter(!is.na(Asthma_Status)) |>
group_by(State_Name) |>
summarise(
Total_Cases = n(),
Asthma_Cases = sum(Asthma_Status %in% c("Current", "Former")),
Percentage_Asthma = (Asthma_Cases / Total_Cases) * 100
) |>
ungroup() |>
mutate(State_Color = ifelse(Percentage_Asthma <= quantile(Percentage_Asthma, probs = 0.2), "lightgreen", "darkred")) |>
arrange(Percentage_Asthma) |>
slice(c(1:5, (n()-4):n())) |>
ggplot(aes(x = reorder(State_Name, Percentage_Asthma), y = Percentage_Asthma, fill = State_Color)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(Percentage_Asthma, 1), "%")), hjust = -0.1, size = 3, color = "black") +
coord_flip() +
scale_fill_manual(values = c("darkred" = "darkred", "lightgreen" = "lightgreen")) +
labs(title = "Top and bottom 5 States by current and former asthma status",
x = "",
y = "Percentage of current and former asthma status") +
expand_limits(y = c(0, 20)) +
theme_minimal() +
theme(axis.title.x = element_text(vjust = -0.7),
legend.position = "none")
# Checking variables names and structure
str(brf_data)
# Function to calculate Cramer's V for specified predictors against a response variable
calculate_cramers_v <- function(data) {
predictors <- c("Race_Ethnicity", "Sex", "BMI_Category", "Smoking_Status")
sapply(predictors, function(predictor) {
tbl <- data |>
select(Asthma_Status, all_of(predictor)) |>
na.omit() |>
table()
chi2 <- suppressWarnings(chisq.test(tbl)$statistic)
n <- sum(tbl)
phi2 <- chi2 / n
minDim <- min(dim(tbl) - 1)
cramers_v <- sqrt(phi2 / minDim)
return(cramers_v)
}, simplify = "vector", USE.NAMES = TRUE)
}
# Apply the function to the data frame
cramers_v_values <- calculate_cramers_v(brf_data)
# Сleaning variable names from unwanted suffixes
names(cramers_v_values) <- gsub("\\.X-squared", "", names(cramers_v_values))
# Create the heatmap from cramers_v_values
cramers_v_values |>
enframe(name = "Variable", value = "CramersV") |>
mutate(Variable = factor(Variable, levels = names(cramers_v_values))) |>
ggplot(aes(x = Variable, y = "", fill = CramersV)) +
geom_tile(color = "grey") +
geom_text(aes(label = sprintf("%.3f", CramersV)), vjust = -0.3) +
scale_fill_gradient(low = "lightblue", high = "steelblue", name = "Cramer's V") +
theme_minimal() +
labs(title = "Heatmap of Cramer's V values", x = "", y = "") +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "right")
# Function to conduct chi-squared tests and obtain p-values
conduct_chi_squared_tests <- function(data, response_var, predictors) {
predictors |>
lapply(function(predictor) {
# Create contingency table
tbl <- table(data[[response_var]], data[[predictor]], useNA = "no")
# Perform chi-squared test
test <- tryCatch(chisq.test(tbl), error = function(e) NA)
if (!is.null(test$p.value)) {
p_value <- ifelse(is.numeric(test$p.value), test$p.value[1], NA)
} else {
p_value <- NA
}
return(data.frame(Variable = predictor, PValue = p_value))
}) |>
bind_rows() |>
mutate(Significance = PValue < 0.05,
Label = ifelse(is.na(PValue), "NA", sprintf("%.2e", PValue)))
}
# Applying the function to a data frame and filtering significant results
brf_data |>
conduct_chi_squared_tests("Asthma_Status", c("Race_Ethnicity", "Sex", "BMI_Category", "Smoking_Status")) |>
mutate(Variable = factor(Variable, levels = c("Race_Ethnicity", "Sex", "BMI_Category", "Smoking_Status"))) |>
filter(Significance) |>
ggplot(aes(x = Variable, y = -log10(PValue))) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Label), vjust = 5, size = 3) +
labs(title = "Chi-Squared test P-Values for various variables",
subtitle = "Only significant p-values (p < 0.05) are displayed",
x = "") +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
# Variables preparation with selected predictors
brf_data_prepared <- brf_data |>
# Select only relevant predictors and the outcome variable
select(Asthma_Status, Race_Ethnicity, Sex, BMI_Category, Smoking_Status) |>
# Transform Asthma_Status into a binary outcome variable
mutate(Asthma_Binary = ifelse(Asthma_Status %in% c("Current", "Former"), "Ever", "Never")) |>
mutate(Asthma_Binary = factor(Asthma_Binary, levels = c("Never", "Ever"))) |>
# Filter out NAs to ensure complete cases for analysis
filter(!is.na(Asthma_Binary), !is.na(Race_Ethnicity), !is.na(Sex), !is.na(BMI_Category), !is.na(Smoking_Status)) |>
# Set reference categories for predictors, guided by my exploratory insights
mutate(
Race_Ethnicity = relevel(Race_Ethnicity, ref = "Other"), # I chose "Other" as the reference category because it had the lowest combined number of "Current" and "Former" asthma cases among the racial/ethnic groups in the dataset
Sex = relevel(Sex, ref = "Male"), # Same idea since Female has a higher proportion of asthma cases
BMI_Category = relevel(BMI_Category, ref = "Normal Weight"),
Smoking_Status = relevel(Smoking_Status, ref = "Never smoked")
) |>
# Ensure to drop the original Asthma_Status as we now use Asthma_Binary
select(-Asthma_Status)
# Check result
str(brf_data_prepared)
# Fit the logistic regression model
logistic_model <- glm(Asthma_Binary ~ Race_Ethnicity + Sex + BMI_Category + Smoking_Status,
data = brf_data_prepared, family = binomial())
# Display the summary of the model to interpret the results
summary(logistic_model)
exp(coef(logistic_model))
# Define a diverse set of hypothetical profiles
profiles <- data.frame(
Race_Ethnicity = factor(c("Multiracial", "White", "Black", "Hispanic", "Multiracial", "Black", "White", "Hispanic", "Black", "Black"),
levels = c("Other", "White", "Black", "Multiracial", "Hispanic")),
Sex = factor(c("Female", "Female", "Female", "Male", "Female", "Male", "Female", "Female", "Male", "Female"),
levels = c("Male", "Female")),
BMI_Category = factor(c("Obese", "Underweight", "Normal Weight", "Overweight", "Obese", "Obese", "Normal Weight", "Obese", "Normal Weight", "Overweight"),
levels = c("Normal Weight", "Underweight", "Overweight", "Obese")),
Smoking_Status = factor(c("Everyday smoker", "Never smoked", "Former smoker", "Someday smoker", "Never smoked", "Everyday smoker", "Former smoker", "Never smoked", "Someday smoker", "Never smoked"),
levels = c("Never smoked", "Everyday smoker", "Someday smoker", "Former smoker"))
)
# Calculating predicted probabilities
profiles$Predicted_Probability <- predict(logistic_model, newdata = profiles, type = "response")
# Sorting profiles by their predicted probabilities
profiles <- profiles[order(-profiles$Predicted_Probability),]
# Creating profile descriptions
profiles$Description <- paste(profiles$Race_Ethnicity, profiles$Sex, profiles$BMI_Category, profiles$Smoking_Status, sep=", ")
# Visualizing the predicted probabilities
ggplot(profiles, aes(x = reorder(Description, -Predicted_Probability), y = Predicted_Probability)) +
geom_bar(stat = "identity", fill = "darkgrey") +
geom_text(aes(label = sprintf("%.3f", Predicted_Probability)), position = position_dodge(width = 0.9), hjust = 1.1) +
coord_flip() +
labs(title = "Predicted probability of having asthma",
x = "",
y = "") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
